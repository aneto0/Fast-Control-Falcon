//Test the PLC interface
+EPICS_CA = {
    Class = EPICS::EPICSCAClient
	StackSize = 1048576
	CPUs = 0x1
    AutoStart = 0
	+PV_STATUS = {
		Class = EPICS::EPICSPV
		PVName = "TEST-AUX-FDAQ:Fast_Status"
		PVType = uint32
   	}    
	+PV_COMMAND = {
		Class = EPICS::EPICSPV
		PVName = "TEST-AUX-FDAQ:Fast_Status_CMD"
		PVType = uint32
		Event = {
    		Destination = StateMachine
    		PVValue = Function
    		FunctionMap = {{"1", "ACQUIRE"}, {"0", "STOP"}}
		}
   	}    
	+PV_ERROR = {
		Class = EPICS::EPICSPV
		PVName = "TEST-AUX-FDAQ:Fast_Error"
		PVType = uint32
	}
	+PV_ERROR_RST = {
		Class = EPICS::EPICSPV
		PVName = "TEST-AUX-FDAQ:Fast_Error_Rst"
		PVType = uint32
		Event = {
    		Destination = StateMachine
    		PVValue = Ignore
    		Function = "RESET"
        }
	}
}
+StateMachine = {
	Class = StateMachine
	+INITIAL = {
    	Class = ReferenceContainer    	
    	+START = {
    		Class = StateMachineEvent
    		NextState = "IDLE"
			NextStateError = "IDLE"
    		Timeout = 0    		
    		+StartCAClient = {
				Class = Message
 				Destination = "EPICS_CA"
    			Function = "Start"
         		Mode = ExpectsReply
			}
			+ChangeToIdleMsg = {
        		Class = Message
        		Destination = FalconApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Idle
        		}
        	}
        	+ChangeToIdleMsgPLCSDN = {
        		Class = Message
        		Destination = PLCSDNApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Idle
        		}
        	}
        	+StartNextStateExecutionMsg = {
        		Class = Message
        		Destination = FalconApp
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
        	}
			+StartNextStateExecutionMsgPLCSDN = {
        		Class = Message
        		Destination = PLCSDNApp
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
        	}
    	}    	
	}
	+IDLE = {
    	Class = ReferenceContainer
    	+ACQUIRE = {
    		Class = StateMachineEvent
    		NextState = "ACQUIRING"
    		NextStateError = "ERROR"
            Timeout = 0        	  
            +PrepareChangeToAcquiringMsg = {
        		Class = Message
        		Destination = FalconApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Acquiring
        		}
        	}
        	+StopCurrentStateExecutionMsg = {
        		Class = Message
        		Destination = FalconApp
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
        	}
        	+StartNextStateExecutionMsg = {
        		Class = Message
        		Destination = FalconApp
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
        	}
        }
        +STOP = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "IDLE"
        }
        +ERROR = {
    		Class = StateMachineEvent
    		NextState = "ERROR"
    		NextStateError = "ERROR"
        }
    }
    +ACQUIRING = {
    	Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
        		Class = Message
        		Destination = "EPICS_CA.PV_STATUS"
        		Function = CAPut
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 1
        		}
            } 
        }
    	+ERROR = {
    		Class = StateMachineEvent
    		NextState = "ERROR"
    		NextStateError = "ERROR"
        } 
    	+STOP = {
    		Class = StateMachineEvent
    		NextState = "IDLE"
    		NextStateError = "ERROR"
            Timeout = 0                                	
        	+StopCurrentStateExecutionMsg = {
        		Class = Message
        		Destination = FalconApp
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
        	}
        	+MessageFlush = {
        		Class = Message
        		Destination = "FalconApp.Data.MDSWriter"
        		Function = FlushSegments
        		Mode = ExpectsReply
        	}
        	+MessageFlushSlow = {
        		Class = Message
        		Destination = "FalconApp.Data.MDSWriterSlow"
        		Function = FlushSegments
        		Mode = ExpectsReply
        	}
        	+PrepareChangeToIdleMsg = {
        		Class = Message
        		Destination = FalconApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Idle
        		}
        	}
            +SetStatusPV = {
        		Class = Message
        		Destination = "EPICS_CA.PV_STATUS"
        		Function = CAPut
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 0
        		}
            } 
            +SetErrorStatusPV = {
        		Class = Message
        		Destination = "EPICS_CA.PV_ERROR"
        		Function = CAPut
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 0
        		}
            } 
        	+StartNextStateExecutionMsg = {
        		Class = Message
        		Destination = FalconApp
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
        	}
        }
        +ACQUIRE = {
            Class = StateMachineEvent
            NextState = "ACQUIRING"
            NextStateError = "ACQUIRING"
        }
	}
    +ERROR = {
    	Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +StopCurrentStateExecutionMsg = {
        		Class = Message
        		Destination = FalconApp
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
        	}
        	+PrepareChangeToErrorMsg = {
        		Class = Message
        		Destination = FalconApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Error
        		}
        	}
        	+StartNextStateExecutionMsg = {
        		Class = Message
        		Destination = FalconApp
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
        	}
            +SetStatusPV = {
        		Class = Message
        		Destination = "EPICS_CA.PV_STATUS"
        		Function = CAPut
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 0
        		}
            } 
            +SetErrorPV = {
        		Class = Message
        		Destination = "EPICS_CA.PV_ERROR"
        		Function = CAPut
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 1
        		}
            }     		
        }
    	+RESET = {
    		Class = StateMachineEvent
    		NextState = "IDLE"
    		NextStateError = "IDLE"
            Timeout = 0                                	
        	+StopCurrentStateExecutionMsg = {
        		Class = Message
        		Destination = FalconApp
        		Function = StopCurrentStateExecution
        		Mode = ExpectsReply
        	}
            +ResetErrorPV = {
        		Class = Message
        		Destination = "EPICS_CA.PV_ERROR"
        		Function = CAPut
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 0
        		}
            }
        	+PrepareChangeToIdleMsg = {
        		Class = Message
        		Destination = FalconApp
        		Mode = ExpectsReply
        		Function = PrepareNextState
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = Idle
        		}
        	}
        	+StartNextStateExecutionMsg = {
        		Class = Message
        		Destination = FalconApp
        		Function = StartNextStateExecution
        		Mode = ExpectsReply
        	}
            +SetErrorStatusPV = {
        		Class = Message
        		Destination = "EPICS_CA.PV_ERROR"
        		Function = CAPut
        		Mode = ExpectsReply
        		+Parameters = {
        			Class = ConfigurationDatabase
        			param1 = 0
        		}
            } 
        }
    	+ACQUIRE = {
    		Class = StateMachineEvent
    		NextState = "ERROR"
    		NextStateError = "ERROR"
        }
    	+STOP = {
    		Class = StateMachineEvent
    		NextState = "ERROR"
    		NextStateError = "ERROR"
        }
    	+ERROR = {
    		Class = StateMachineEvent
    		NextState = "ERROR"
    		NextStateError = "ERROR"
        }

	}
}
$FalconApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
        	Class = IOGAM
        	InputSignals = {
        		Counter = {
        			Type = uint32
        			DataSource = Timer
        		}
        		Time = {
        			Type = uint32
        			DataSource = Timer
        			Frequency = 1
        		}
        	}
        	OutputSignals = {
        		Counter = {
        			Type = uint32
        			DataSource = LoggerDataSource
        		}
        		Time = {
        			Type = uint32
        			DataSource = DDB1        			
        		}
        	}
        }
        +GAMWFP = {	
            Class = WaveformGAM::WaveformPointsDef
            Points = {0 100000}
            Times = {0.0 100000}
            InputSignals = {
                Time = {
                    DataSource = "DDB1"
                    Type = uint32 
                }
            }
            OutputSignals = {
                Wave1 = {
                    DataSource = "LoggerDataSource"
                    Type = float64
                    NumberOfElements = 1
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
        	Class = GAMDataSource
       	}    
       	+Timer = {
       		Class = LinuxTimer
       		Signals = {
       			Counter = {
       				Type = uint32
       			}
       			Time = {
       				Type = uint32
       			}
       		}
       	}    
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }        
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer }
                }
            }
        }
        +Acquiring = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x4
                    Functions = {GAMTimer GAMWFP }
                }
            }
        }        
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
$PLCSDNApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMPLCH = {
        	Class = ConstantGAM
        	OutputSignals = {
        		HeaderNF = {
                     Type = uint8
                     NumberOfElements = 1
                     Default = 1
                     DataSource = SDNPub
                }
                HeaderNI = {
                     Type = uint8
                     NumberOfElements = 1
                     Default = 1
                     DataSource = SDNPub
                }
                HeaderNC = {
                     Type = uint8
                     NumberOfElements = 1
                     Default = 2
                     DataSource = SDNPub
                }
                HeaderNS = {
                     Type = uint8
                     NumberOfElements = 1
                     Default = 1
                     DataSource = SDNPub
                }
                HeaderNA = {
                     Type = uint8
                     NumberOfElements = 1
                     Default = 1
                     DataSource = SDNPub
                }
        	}
        }
        +GAMSDNSub = {	
            Class = IOGAM
            InputSignals = {
                Header = {
                     Type = uint8
                     NumberOfElements = 48
                     DataSource = SDNSub
                     Frequency = 1
                }
                PLCHeader = {
                     Type = uint8
                     NumberOfElements = 8
                     DataSource = SDNSub
                }
                Floats = {
            		Type = float32
                	NumberOfElements = 1
					NumberOfDimensions = 1
					DataSource = SDNSub
            	}
				Integers = {
                	Type = uint16
					NumberOfElements = 1     
					NumberOfDimensions = 1
					DataSource = SDNSub
                }
                Commands = {
                	Type = uint8
					NumberOfElements = 2     
					NumberOfDimensions = 1
					DataSource = SDNSub
                }
                States = {
                	Type = uint8
					NumberOfElements = 1     
					NumberOfDimensions = 1
					DataSource = SDNSub
                }
                Alarms = {
                	Type = uint8
					NumberOfElements = 1     
					NumberOfDimensions = 1
					DataSource = SDNSub
                }
            }
            OutputSignals = {
            	PLCSDNHeader = {
                     Type = uint8
                     NumberOfElements = 48
                     DataSource = LoggerDataSource
                }
                PLCHeader = {
                     Type = uint8
                     NumberOfElements = 8
                     DataSource = DDB1
                }
                PLCFloats = {
            		Type = float32
                	NumberOfElements = 1
					NumberOfDimensions = 1
					DataSource = DDB1
            	}
				PLCIntegers = {
                	Type = uint16
					NumberOfElements = 1     
					NumberOfDimensions = 1
					DataSource = DDB1
                }
                Command1 = {
                	Type = uint8
					NumberOfElements = 1     
					NumberOfDimensions = 1
					DataSource = DDB1
                }
                Command2 = {
                	Type = uint8
					NumberOfElements = 1     
					NumberOfDimensions = 1
					DataSource = DDB1
                }
                PLCStates = {
                	Type = uint8
					NumberOfElements = 1     
					NumberOfDimensions = 1
					DataSource = DDB1
                }
                PLCAlarms = {
                	Type = uint8
					NumberOfElements = 1     
					NumberOfDimensions = 1
					DataSource = DDB1
                }
            }
        }
        +GAMTOC = {
 			Class = TriggerOnChangeGAM
			+Events = {
				Class = ReferenceContainer
				+Event1 = {
					Class = EventConditionTrigger
					EventTrigger = {
						Command1 = 1
					}
					+Message1 = {
						Class = Message
						Destination = StateMachine
						Function = ACQUIRE
						Mode = ExpectsReply
					}
				}
				+Event2 = {
					Class = EventConditionTrigger
					EventTrigger = {
						Command1 = 2
					}
					+Message1 = {
						Class = Message
 						Destination = StateMachine
						Function = STOP
						Mode = ExpectsReply
 	               	}
	         	}
				+Event3 = {
					Class = EventConditionTrigger
					EventTrigger = {
						Command2 = 1
					}
					+Message1 = {
						Class = Message
 						Destination = StateMachine
						Function = ERROR
						Mode = ExpectsReply
 	               	}
	         	}
 			} 
         	InputSignals = {
            	Command1 = {
                	DataSource = DDB1
					Type = uint8
					NumberOfElements = 1
				}
				Command2 = {
                	DataSource = DDB1
					Type = uint8
					NumberOfElements = 1
				}
         	}
         	OutputSignals = {
            	CommandsAck = {
                	DataSource = DDB1
                	Type = uint8
                	NumberOfDimensions = 1
                	NumberOfElements = 2 //2 input commands
            	}
            	State = {
            		DataSource = DDB1
                	Type = uint32
                	NumberOfDimensions = 1
                	NumberOfElements = 2 //2 input commands
                	Trigger = 1
				}
			}
		}
		+GAMSDNPub = {	
            Class = IOGAM
            InputSignals = {
                CommandsAck = {
                	Type = uint8
					NumberOfElements = 2     
					NumberOfDimensions = 1
					DataSource = DDB1
                }                
            }
            OutputSignals = {
                CommandsAck = {
                	Type = uint8
					NumberOfElements = 2     
					NumberOfDimensions = 1
					DataSource = SDNPub
					Trigger = 1
                }
            }
        }    
	}
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
        	Class = GAMDataSource
       	}    
       	+SDNSub = {
            Class = SDN::SDNSubscriber            
            //Interface = enp0s25
            Interface = lo
            //Address = "192.168.1.2:44446"
            Address = "127.0.0.1:44444"
            Topic = Ignored
            //Timeout = 1000
            Signals = {
            	Header = {
                     Type = uint8
                     NumberOfElements = 48
                }
                PLCHeader = {
                     Type = uint8
                     NumberOfElements = 8
                }
                Floats = {
            		Type = float32
                	NumberOfElements = 1
					NumberOfDimensions = 1
            	}
				Integers = {
                	Type = uint16
					NumberOfElements = 1     
					NumberOfDimensions = 1
                }
                Commands = {
                	Type = uint8
					NumberOfElements = 2     
					NumberOfDimensions = 1
                }
                States = {
                	Type = uint8
					NumberOfElements = 1     
					NumberOfDimensions = 1
                }
                Alarms = {
                	Type = uint8
					NumberOfElements = 1     
					NumberOfDimensions = 1
                }
                Spares = {
                	Type = uint8
					NumberOfElements = 90     
					NumberOfDimensions = 1
                }
            }
        }
        +SDNPub = {
            Class = SDN::SDNPublisher            
            Interface = enp0s25
            Address = "192.168.1.2:44448"
            Topic = AlsoIgnored
            Signals = {
                HeaderNF = {
                     Type = uint8
                     NumberOfElements = 1
                }
                HeaderNI = {
                     Type = uint8
                     NumberOfElements = 1
                }
                HeaderNC = {
                     Type = uint8
                     NumberOfElements = 1
                }
                HeaderNS = {
                     Type = uint8
                     NumberOfElements = 1
                }
                HeaderNA = {
                     Type = uint8
                     NumberOfElements = 1
                }
                HeaderS = {
                     Type = uint8
                     NumberOfElements = 3
                }
                Floats = {
            		Type = float32
                	NumberOfElements = 1
					NumberOfDimensions = 1
            	}
				Integers = {
                	Type = uint16
					NumberOfElements = 1     
					NumberOfDimensions = 1
                }
                Acknowledgment = {
                	Type = uint8
					NumberOfElements = 2     
					NumberOfDimensions = 1
                }
                States = {
                	Type = uint8
					NumberOfElements = 1     
					NumberOfDimensions = 1
                }
                Alarms = {
                	Type = uint8
					NumberOfElements = 1     
					NumberOfDimensions = 1
                }                
            }
        } 
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }        
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {GAMSDNSub GAMTOC GAMPLCH GAMSDNPub}
                }
            }
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
